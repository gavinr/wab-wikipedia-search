{"version":3,"sources":["../../../widgets/WikipediaSearch/Widget.js"],"names":["declare","BaseWidget","esriRequest","Point","SimpleMarkerSymbol","SimpleLineSymbol","InfoTemplate","Graphic","GraphicsLayer","graphicsUtils","Color","html","focusUtil","_WidgetsInTemplateMixin","TextBox","BusyButton","baseClass","formSubmit","evt","preventDefault","stopPropagation","clearGraphicsLayer","wikipediaSearch","queryText","get","then","searchResults","getCoordsForArray","locationResults","mapLocations","zoomToCurrentGraphics","searchQuery","req","url","content","namesArr","Promise","resolve","reject","i","j","promises","chunk","length","push","_getCoordsForArray","slice","all","results","mergedResults","reduce","accumulator","currentValue","Object","assign","query","pages","join","locations","atLeastOneLocationPoint","prop","hasOwnProperty","pt","coordinates","lon","lat","addGraphic","title","fullurl","extract","setResultText","getGraphicsLayer","graphics","resultText","set","resultsArea","geom","gl","symbol","STYLE_CIRCLE","STYLE_SOLID","short","console","log","template","setContent","info","retString","nls","viewOnWikipedia","add","name","locationsLayer","map","addLayer","clear","extent","graphicsExtent","setExtent","centerAndZoom","geometry","resetWidget","onOpen","focus","onClose"],"mappings":"QAAoB,oB,EACG,iB,EAEC,c,EACN,qB,EACa,iC,EACF,+B,EAEJ,mB,EACL,c,EACM,2B,EACA,oB,EAER,kB,EACD,W,EAEK,a,EACc,+B,EAEhB,oB,EACG,uB,aApBhBA,O,EACAC,U,EAEAC,W,EACAC,K,EACAC,kB,EACAC,gB,EAEAC,Y,EACAC,O,EACAC,a,EACAC,a,EAEAC,K,EACAC,I,EAEAC,S,EACAC,uB,EAEAC,O,EACAC,U;SAEQf,QAAQ,CAACC,UAAD,EAAaY,uBAAb,CAAR,EAA+C;;AAE5DG,eAAW,kBAFiD;;AAI5DC,cAJ4D,sBAIjDC,GAJiD,EAI5C;AAAA;;AACdA,UAAIC,cAAJ;AACAD,UAAIE,eAAJ;;AAEA,WAAKC,kBAAL;AACA,WAAKC,eAAL,CAAqB,KAAKC,SAAL,CAAeC,GAAf,CAAmB,OAAnB,CAArB,EAAkDC,IAAlD,CAAuD,UAACC,aAAD,EAAmB;AACxE;AACA,cAAKC,iBAAL,CAAuBD,cAAc,CAAd,CAAvB,EAAyCD,IAAzC,CAA8C,UAACG,eAAD,EAAqB;AACjE,gBAAKC,YAAL,CAAkBD,eAAlB;AACA,gBAAKE,qBAAL;AACD,SAHD;AAID,OAND;AAOD,KAhB2D;AAkB5DR,mBAlB4D,2BAkB5CS,WAlB4C,EAkB/B;AAC3B,UAAIC,MAAM;AACRC,aAAK,oCADG;AAERC,iBAAS;AACP,oBAAU,YADH;AAEP,oBAAUH,WAFH;AAGP,mBAAS,IAHF;AAIP,uBAAa,GAJN;AAKP,oBAAU;AALH;AAFD,OAAV;AAUA,aAAO7B,YAAY8B,GAAZ,CAAP;AACD,KA9B2D;AAgC5DL,qBAhC4D,6BAgC1CQ,QAhC0C,EAgChC;AAAA;;AAC1B,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACA,YAAIC,IAAI,CAAR;AACA,YAAIC,IAAI,CAAR;AACA,YAAIC,WAAW,EAAf;AACA,YAAIC,QAAQ,EAAZ;AACA,aAAIH,IAAE,CAAF,EAAIC,IAAEL,SAASQ,MAAnB,EAA2BJ,IAAEC,CAA7B,EAAgCD,KAAGG,KAAnC,EAA0C;AACxCD,mBAASG,IAAT,CAAc,OAAKC,kBAAL,CAAwBV,SAASW,KAAT,CAAeP,CAAf,EAAkBA,IAAEG,KAApB,CAAxB,CAAd;AACD;;AAEDN,gBAAQW,GAAR,CAAYN,QAAZ,EAAsBhB,IAAtB,CAA2B,UAACuB,OAAD,EAAa;AACtC;AACA,cAAMC,gBAAgBD,QAAQE,MAAR,CAAe,UAACC,WAAD,EAAcC,YAAd,EAA+B;AAClE,mBAAOC,OAAOC,MAAP,CAAcH,WAAd,EAA2BC,aAAaG,KAAb,CAAmBC,KAA9C,CAAP;AACD,WAFqB,EAEnB,EAFmB,CAAtB;AAGAnB,kBAAQY,aAAR;AACD,SAND;AAOD,OAjBM,CAAP;AAoBD,KArD2D;AAuD5DJ,sBAvD4D,8BAuDzCV,QAvDyC,EAuD/B;AAC3B,UAAIH,MAAM;AACRC,aAAK,oCADG;AAERC,iBAAS;AACP,oBAAU,OADH;AAEP,kBAAQ,2BAFD;AAGP,oBAAUC,SAASsB,IAAT,CAAc,GAAd,CAHH;AAIP,qBAAW,IAJJ;AAKP,oBAAU,oCALH;AAMP,oBAAU,MANH;AAOP,oBAAU,KAPH;AAQP,qBAAW,GARJ;AASP,yBAAe;AATR;AAFD,OAAV;AAcA,aAAOvD,YAAY8B,GAAZ,CAAP;AACD,KAvE2D;AAyE5DH,gBAzE4D,wBAyE/C6B,SAzE+C,EAyEpC;AACtB,UAAIC,0BAA0B,KAA9B;AACA,WAAK,IAAIC,IAAT,IAAiBF,SAAjB,EAA4B;AAC1B,YAAIA,UAAUE,IAAV,EAAgBC,cAAhB,CAA+B,aAA/B,CAAJ,EAAmD;AACjDF,oCAA0B,IAA1B;AACA,cAAIG,KAAK,IAAI3D,KAAJ,CAAUuD,UAAUE,IAAV,EAAgBG,WAAhB,CAA4B,CAA5B,EAA+BC,GAAzC,EAA8CN,UAAUE,IAAV,EAAgBG,WAAhB,CAA4B,CAA5B,EAA+BE,GAA7E,CAAT;AACA,eAAKC,UAAL,CAAgBJ,EAAhB,EAAoBJ,UAAUE,IAAV,EAAgBO,KAApC,EAA2CT,UAAUE,IAAV,EAAgBQ,OAA3D,EAAoEV,UAAUE,IAAV,EAAgBS,OAApF;AACD;AACF;AACD,UAAIV,uBAAJ,EAA6B;AAC3B,aAAKW,aAAL,CAAmB,KAAKC,gBAAL,GAAwBC,QAAxB,CAAiC7B,MAAjC,GAA0C,qBAA7D;AACD,OAFD,MAEO;AACL,aAAK2B,aAAL,CAAmB,qBAAnB;AACD;AACF,KAvF2D;AAyF5DA,iBAzF4D,yBAyF9CG,UAzF8C,EAyFlC;AACxB9D,WAAK+D,GAAL,CAAS,KAAKC,WAAd,EAA2BF,UAA3B;AACD,KA3F2D;AA6F5DP,cA7F4D,sBA6FjDU,IA7FiD,EA6F3CT,KA7F2C,EA6FpClC,GA7FoC,EA6F/BoC,OA7F+B,EA6FtB;AAAA;;AACpC,UAAIQ,KAAK,KAAKN,gBAAL,EAAT;AACA,UAAIO,SAAS,IAAI1E,kBAAJ,CAAuBA,mBAAmB2E,YAA1C,EAAwD,EAAxD,EACX,IAAI1E,gBAAJ,CAAqBA,iBAAiB2E,WAAtC,EACE,IAAItE,KAAJ,CAAU,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,CAAV,CADF,EAC0B,CAD1B,CADW,EAGX,IAAIA,KAAJ,CAAU,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,EAAY,IAAZ,CAAV,CAHW,CAAb;;AAKA;AACA,UAAIuE,QAAQ,EAAZ;AACA,UAAGZ,OAAH,EAAY;AACVY,gBAAQZ,OAAR;AACD,OAFD,MAEO;AACLa,gBAAQC,GAAR,CAAY,aAAZ;AACD;;AAED,UAAMC,WAAW,IAAI9E,YAAJ,CAAiB;AAChC6D,eAAO;AADyB,OAAjB,CAAjB;;AAIAiB,eAASC,UAAT,CACE,UAACC,IAAD,EAAU;AACR,YAAIC,cAAJ;AACA,YAAGN,SAASA,UAAU,EAAtB,EAA0B;AACxBM,2BAAeA,SAAf,GAA2BN,KAA3B;AACD;AACD,eAAUM,SAAV,iBAA+BtD,GAA/B,0BAAuD,OAAKuD,GAAL,CAASC,eAAhE;AACD,OAPH;;AAUAZ,SAAGa,GAAH,CAAO,IAAInF,OAAJ,CAAYqE,IAAZ,EAAkBE,MAAlB,EAA0B;AAC/Ba,cAAMxB;AADyB,OAA1B,EAEJiB,QAFI,CAAP;AAGD,KA7H2D;AA+H5Db,oBA/H4D,8BA+HzC;AACjB,UAAI,CAAC,KAAKqB,cAAV,EAA0B;AACxB,aAAKA,cAAL,GAAsB,IAAIpF,aAAJ,EAAtB;AACA,aAAKqF,GAAL,CAASC,QAAT,CAAkB,KAAKF,cAAvB;AACD;AACD,aAAO,KAAKA,cAAZ;AACD,KArI2D;AAuI5DvE,sBAvI4D,gCAuIvC;AACnB,WAAKkD,gBAAL,GAAwBwB,KAAxB;AACD,KAzI2D;AA2I5DjE,yBA3I4D,mCA2IpC;AACtB,UAAIkE,SAASvF,cAAcwF,cAAd,CAA6B,KAAK1B,gBAAL,GAAwBC,QAArD,CAAb;AACA,UAAIwB,MAAJ,EAAY;AACV,aAAKH,GAAL,CAASK,SAAT,CAAmBF,MAAnB,EAA2B,IAA3B;AACD,OAFD,MAEO;AACL,aAAKH,GAAL,CAASM,aAAT,CAAuB,KAAK5B,gBAAL,GAAwBC,QAAxB,CAAiC,CAAjC,EAAoC4B,QAA3D,EAAqE,CAArE;AACD;AACF,KAlJ2D;AAoJ5DC,eApJ4D,yBAoJ9C;AACZ,WAAKhF,kBAAL;AACA,WAAKE,SAAL,CAAemD,GAAf,CAAmB,OAAnB,EAA4B,EAA5B;AACA,WAAKJ,aAAL,CAAmB,EAAnB;AACD,KAxJ2D;AA0J5DgC,UA1J4D,oBA0JnD;AACP1F,gBAAU2F,KAAV,CAAgB,KAAKhF,SAArB;AACD,KA5J2D;AA8J5DiF,WA9J4D,qBA8JlD;AACR,WAAKH,WAAL;AACD;AAhK2D,GAA/C,C","file":"Widget.js","sourcesContent":["import declare from 'dojo/_base/declare';\nimport BaseWidget from 'jimu/BaseWidget';\n\nimport esriRequest from 'esri/request';\nimport Point from 'esri/geometry/Point';\nimport SimpleMarkerSymbol from 'esri/symbols/SimpleMarkerSymbol';\nimport SimpleLineSymbol from 'esri/symbols/SimpleLineSymbol';\n// import PopupTemplate from 'esri/dijit/PopupTemplate';\nimport InfoTemplate from 'esri/InfoTemplate';\nimport Graphic from 'esri/graphic';\nimport GraphicsLayer from 'esri/layers/GraphicsLayer';\nimport graphicsUtils from 'esri/graphicsUtils';\n\nimport Color from 'dojo/_base/Color';\nimport html from 'dojo/html';\n\nimport focusUtil from 'dijit/focus';\nimport _WidgetsInTemplateMixin from 'dijit/_WidgetsInTemplateMixin';\n\nimport TextBox from 'dijit/form/TextBox';\nimport BusyButton from 'dojox/form/BusyButton';\n\nexport default declare([BaseWidget, _WidgetsInTemplateMixin], {\n\n  baseClass: 'wikipedia-search',\n\n  formSubmit(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n\n    this.clearGraphicsLayer();\n    this.wikipediaSearch(this.queryText.get('value')).then((searchResults) => {\n      // get coords\n      this.getCoordsForArray(searchResults[1]).then((locationResults) => {\n        this.mapLocations(locationResults);\n        this.zoomToCurrentGraphics();\n      });\n    });\n  },\n\n  wikipediaSearch(searchQuery) {\n    var req = {\n      url: 'https://en.wikipedia.org/w/api.php',\n      content: {\n        'action': 'opensearch',\n        'search': searchQuery,\n        'limit': '50',\n        'namespace': '0',\n        'format': 'json'\n      }\n    };\n    return esriRequest(req);\n  },\n\n  getCoordsForArray(namesArr) {\n    return new Promise((resolve, reject) => {\n      // do 20 at a time due to API limits:\n      let i = 0;\n      let j = 0;\n      let promises = [];\n      let chunk = 20;\n      for(i=0,j=namesArr.length; i<j; i+=chunk) {\n        promises.push(this._getCoordsForArray(namesArr.slice(i, i+chunk)));\n      }\n      \n      Promise.all(promises).then((results) => {\n        // normalize\n        const mergedResults = results.reduce((accumulator, currentValue) => {\n          return Object.assign(accumulator, currentValue.query.pages);\n        }, {});\n        resolve(mergedResults);\n      });\n    });\n\n    \n  },\n\n  _getCoordsForArray(namesArr) {\n    var req = {\n      url: 'https://en.wikipedia.org/w/api.php',\n      content: {\n        'action': 'query',\n        'prop': 'info|coordinates|extracts',\n        'titles': namesArr.join('|'),\n        'colimit': '20',\n        'coprop': 'type|name|dim|country|region|globe',\n        'format': 'json',\n        'inprop': 'url',\n        'exintro': '1',\n        'exsentences': '3'\n      }\n    };\n    return esriRequest(req);\n  },\n\n  mapLocations(locations) {\n    var atLeastOneLocationPoint = false;\n    for (var prop in locations) {\n      if (locations[prop].hasOwnProperty('coordinates')) {\n        atLeastOneLocationPoint = true;\n        var pt = new Point(locations[prop].coordinates[0].lon, locations[prop].coordinates[0].lat);\n        this.addGraphic(pt, locations[prop].title, locations[prop].fullurl, locations[prop].extract);\n      }\n    }\n    if (atLeastOneLocationPoint) {\n      this.setResultText(this.getGraphicsLayer().graphics.length + ' locations(s) found');\n    } else {\n      this.setResultText('No locations found.');\n    }\n  },\n\n  setResultText(resultText) {\n    html.set(this.resultsArea, resultText);\n  },\n\n  addGraphic(geom, title, url, extract) {\n    var gl = this.getGraphicsLayer();\n    var symbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE, 20,\n      new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,\n        new Color([255, 0, 0]), 1),\n      new Color([0, 255, 0, 0.25]));\n\n    // shorten the extract to ~500 characters\n    let short = '';\n    if(extract) {\n      short = extract;\n    } else {\n      console.log('no extract?');\n    }\n\n    const template = new InfoTemplate({\n      title: '${name}'\n    });\n\n    template.setContent(\n      (info) => {\n        let retString = ``;\n        if(short && short !== '') {\n          retString = `${retString}${short}<br /><br />`;\n        }\n        return `${retString}<a href=\"${url}\" target=\"_blank\">${this.nls.viewOnWikipedia}</a>`;\n      }\n    )\n\n    gl.add(new Graphic(geom, symbol, {\n      name: title\n    }, template));\n  },\n\n  getGraphicsLayer() {\n    if (!this.locationsLayer) {\n      this.locationsLayer = new GraphicsLayer();\n      this.map.addLayer(this.locationsLayer);\n    }\n    return this.locationsLayer;\n  },\n\n  clearGraphicsLayer() {\n    this.getGraphicsLayer().clear();\n  },\n\n  zoomToCurrentGraphics() {\n    var extent = graphicsUtils.graphicsExtent(this.getGraphicsLayer().graphics);\n    if (extent) {\n      this.map.setExtent(extent, true);\n    } else {\n      this.map.centerAndZoom(this.getGraphicsLayer().graphics[0].geometry, 5);\n    }\n  },\n\n  resetWidget() {\n    this.clearGraphicsLayer();\n    this.queryText.set('value', '');\n    this.setResultText('');\n  },\n\n  onOpen() {\n    focusUtil.focus(this.queryText);\n  },\n\n  onClose() {\n    this.resetWidget();\n  }\n});"]}